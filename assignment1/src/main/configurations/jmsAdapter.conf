name = "jmsAdapter.conf"
type = "com.tibco.ep.streambase.configuration.adapter"
version = "1.0.0"
configuration = {

	// An EventFlow JMS adapter configuration.
	JMSAdapter = {

		// An associative array of JMS server configurations, used by this adapter to subscribe to messages from one or more
		// JMS message buses. This key is required and must contain at least one server configuration.
		jmsServers = {

			// A JMS server is configured using this object. Server names containing dots must be surrounded with double quotes.
			// There are two different ways of connecting, one using JNDI, and one without using JNDI. To connect to a JMS server
			// using JNDI (LDAP, etc.) an initial JNDI Context is instantiated using values for Context.INITIAL_CONTEXT_FACTORY
			// and Context.PROVIDER_URL. Required attibutes are providerContextFactoryClassName, providerURL, and
			// connectionFactoryName. To connect to JMS WITHOUT using JNDI, you must specify the name of a class implementing
			// javax.jms.ConnectionFactory, as well as the URL to use. Required attributes are connectionFactoryClassName and
			// connectionFactoryURL.
			Server = {

				// Name of a connection factory to be looked up by name via a JNDI lookup. This will then be used to construct the
				// connection object. This parameter is required if connecting using JNDI.
				connectionFactoryName = "ConnectionFactory"

				// Class name to use as a value for javax.naming.Context.INITIAL_CONTEXT_FACTORY. This parameter is required if
				// connecting using JNDI.
				providerContextFactoryClassName = "com.tibco.tibjms.naming.TibjmsInitialContextFactory"

				// The name of the JMS provider running this server, e.g. 'TIBCO EMS', 'Apache ActiveMQ'. This key is optional and
				// has no default value.
				providerName = "TIBCO EMS"

				// The naming provider URL, as used by javax.namingContext.PROVIDER_URL. This parameter is required if connecting
				// using JNDI.
				providerURL = "tibjmsnaming://localhost:7222"
			}
		}
	}
}
